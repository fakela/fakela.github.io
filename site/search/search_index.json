{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Hi and welcome. My name is Joe Wojak. I'm a technical writer in NYC.</p> <p>This site contains my resume and technical writing guide. </p>  <p>Demo status</p> <p>Some pages may be blank or incomplete. Links might redirect to placeholder text. </p>"},{"location":"#next-steps","title":"Next steps","text":"<ul> <li> <p>See Work Experience for information about me and a link to my downloadable resume.</p> </li> <li> <p>See the Writing Samples section for examples of my work.</p> </li> <li> <p>See the Writing Guide section for my ideas about writing, styling, and organizing technical documentation.</p> </li> </ul> <p>Thanks for stopping by.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Email: jwojak@gmail.com</li> <li>LinkedIn: www.linkedin.com/in/joewojak</li> <li>GitHub: jwwojak.github.io (and the site you're on now)</li> </ul>"},{"location":"placeholder/","title":"Placeholder","text":"<p>This is a temporary page or placeholder for links connected to resources that are not accessible. </p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ac lectus vel libero cursus aliquam in quis neque. Curabitur facilisis elementum sapien, eget feugiat magna consequat ut. Integer volutpat feugiat auctor. Praesent congue nunc magna, quis laoreet justo venenatis vel. Ut tortor arcu, accumsan quis rutrum sit amet, ultrices et eros. Nulla volutpat nisi diam, ut ornare neque scelerisque et. Donec malesuada, purus id fringilla consequat, ex purus imperdiet turpis, eget sagittis sapien magna tincidunt orci. Phasellus elementum dapibus metus ut aliquet.</p>"},{"location":"guide/intro/","title":"Introduction","text":"<p>There are three rules for writing . . . Unfortunately, no one knows what they are. \u2014 Somerset Maugham</p>"},{"location":"guide/intro/#hello-world","title":"Hello world","text":"<p>Welcome to the Technical Writing Guide. The Guide is for engineers and developers who need to write technical documentation but aren\u2019t sure how to begin. Our documentation philosophy treats content like code and keeps content with the code. In practice, this means writing in a simple language like Markdown and working in familiar development environments (e.g., with Visual Studio and GitHub). The goal of this guide is to help you write documentation that\u2019s confident, clear, accurate, and authoritative.</p>"},{"location":"guide/intro/#why-write-documentation","title":"Why write documentation","text":"<p>Writing good documentation is essential. It helps everyone in your organization understand and use the services and systems that you create. But, sometimes writing is a difficult, intimidating, and tedious activity. Maybe you're unsure about what to include, exclude, or how to organize written content. As a result, we've created this guide. It can help you understand how to write, organize content, and resolve common technical writing issues.</p>  Secondary goals <p>This work is a writing sample and reflects my thoughts about how to create and organize technical documentation. It's a writing reference that's grown over the years. I've used it, in one form or another, at all the companies I've worked for. If you're an experienced technical writer, this information is not that new. Instead, this information is for less experienced content creators (e.g., engineers and developers) who need to write documentation for the systems, services, and products that they build.</p>"},{"location":"guide/intro/#next-steps","title":"Next steps","text":"<p>Here are suggestions about where to go next:</p> <ul> <li> <p>Topic-Based Writing and Documentation Types: An introduction and short primer on organizing complex technical subjects into topics and specific document topic types.</p> </li> <li> <p>Organizing Sections and Pages: An outline and description of how to organize the table of contents and individual sections in your documentation space.</p> </li> </ul>"},{"location":"guide/intro/#make-improvements-and-report-errors","title":"Make improvements and report errors","text":"<p>Everyone is welcome to to leave feedback or report errors. Feel free to open an issue or pull request on GitHub. Our repo is jwwojak.github.io.</p>"},{"location":"guide/api/api_intro/","title":"API Documentation Style Guide","text":"<p>API descriptions should be consistent across and within methods. Flexibility and creativity are good, but we're going to be strict here. Review this section for rules and examples that can help you write clear, concise API descriptions.</p>"},{"location":"guide/api/api_intro/#style-basics","title":"Style basics","text":"<p>When writing API documentation, try to:</p> <ul> <li> <p>Write in the present tense and in the active voice. Present-tense, active-voice writing is strong and confident.</p> </li> <li> <p>Start descriptions with a verb in the imperative mood (e.g., create, update, save, build, push, etc).</p> </li> <li> <p>Describe what each method does right away. Don't waste time with background content or context.</p> </li> <li> <p>Create and link to separate, but related, content when API features are too complicated to explain in a few short sentences.</p> </li> </ul>"},{"location":"guide/api/api_intro/#description-structure","title":"Description structure","text":"<p>These recommendations follow a Swagger type structure for API development and documentation. Specific keys or parameters may not match the tools you're using, but the writing concepts presented here should be applicable across different API development platforms.</p>"},{"location":"guide/api/api_intro/#first-sentence","title":"First sentence","text":"<p>The first sentence of an API description concisely describes the function of a particular method. In your text:</p> <ul> <li>Use the <code>summary</code> parameter.</li> <li>Add more information or links with the <code>description</code> parameter.</li> <li>Limit the main description to a single sentence only!</li> <li>Start with a verb in the imperative as shown in the examples below.</li> </ul>"},{"location":"guide/api/api_intro/#subsequent-sentences-or-supporting-text","title":"Subsequent sentences or supporting text","text":"<p>Supporting text provides more information and links about a method. Use the <code>description</code> parameter to identify this text.</p>"},{"location":"guide/api/api_intro/#example","title":"Example","text":"<pre><code>/section/section:\n    method:\n        summary: \"Some text here.\"\n        description: \"Even more text here.\"\n</code></pre>"},{"location":"guide/api/api_intro/#verbs-for-method-descriptions","title":"Verbs for method descriptions","text":"<p>Usually, repetition in writing is bad and tedious. In the case of API docs, repetition, or, perhaps more accurately, consistency, is your friend. As we're writing about a limited set of commands, it's good to have the description for each command start with the same word. So, try to be consistent in how you start method descriptions.</p> <ul> <li> <p>Each description for a method type (<code>POST</code>, <code>GET</code>, <code>DELETE</code>, <code>PUT</code>, etc.) should have it's own verb.</p> </li> <li> <p>Start the description with the verb that matches the method.</p> </li> <li>Use a verb in the imperative like this:  \"returns,\" \"deletes,\" \"creates,\" \"tests,\" etc. See the method descriptions below.</li> </ul> <p>If these don't work it's OK to try something else. Whatever you do, just be consistent in doing it.</p>"},{"location":"guide/api/api_intro/#verb-cheat-sheet","title":"Verb cheat sheet","text":"<p>These are the recommended verbs you should use to start method descriptions. See also the examples in the next section below.</p>   Method Verb   GET Returns   DELETE Deletes   POST POST methods can do a lot of different things. Try to match the verb to the action the method performs. Here are some examples:         <ul> <li>Creates</li> <li>Deletes</li> <li>Tests</li> <li>Returns</li> <li>Moves</li> </ul>    PUT PUT methods can do a lot of different things. Try to match the verb to the action the method performs. Here are some examples:         <ul> <li>Specifies</li> <li>Updates</li> <li>Appends</li> </ul>"},{"location":"guide/api/api_intro/#description-examples","title":"Description examples","text":"<p>Here are some pseudo-code examples to help you get started.</p>"},{"location":"guide/api/api_intro/#delete-methods","title":"DELETE methods","text":"<p>For single or bulk-delete methods, start the description with the word \"Delete.\"</p> <pre><code>/segments/ic:{integration code}:\n    delete:\n        summary: \"Deletes a specific segment by integration code.\"\n</code></pre>"},{"location":"guide/api/api_intro/#get-methods","title":"GET methods","text":"<p>Start the description with the word \"Returns.\"</p> <pre><code>/traits/:\n    get:\n        summary: \"Returns data for an algorithmic, on-boarded, or rules-based trait.\"\n</code></pre>"},{"location":"guide/api/api_intro/#post-methods","title":"POST methods","text":"<p>POST methods can do various things. The verbs and ways to describe these can vary, but this behavior still lends itself to writing descriptions with a fixed set of verbs and terms. Refer to these examples when writing descriptions for POST methods.</p>  <p>Tip</p> <p>When writing POST descriptions, try to start with a verb that most closely describes what the method does.</p>  <p>Create example</p> <pre><code>/traits/:\n    post:\n        summary: \"Creates a trait that defines part of an audience segment.\"\n</code></pre> <p>Bulk delete example</p> <pre><code>/segments/bulk-delete:\n    post:\n        summary: \"Deletes multiple segments with a single operation.\"\n</code></pre> <p>Test or validate</p> <pre><code>/traits/validate:\n    post:\n        summary: \"Tests the rule logic applied to a rules-based trait.\"\n</code></pre> <p>Return data</p> <pre><code>//The POST method returns data like a GET method.\n\n/segments/estimate-size:\n    post:\n        summary: \"Returns the total estimated segment size for 7-, 30-, and 60-day intervals.\"\n</code></pre> <p>Moving objects</p> <pre><code>/segments/bulk-replace:\n    post:\n        summary: \"Moves audiences in bulk from one segment to another.\"\n</code></pre>"},{"location":"guide/api/api_intro/#put-methods","title":"PUT methods","text":"<p>PUT methods can do a variety of things like POST methods. The verbs and ways to describe these can vary, but this behavior still lends itself to writing descriptions with a fixed set of verbs and terms. Refer to these examples when writing descriptions for PUT methods.</p>  <p>Tip</p> <p>When writing PUT descriptions, try to start with a verb that most closely describes what the method does.</p>  <p>Select or specify</p> <pre><code>/folders/audiences/{folderId}:\n    put:\n        summary: \"Specifies a an audience folder ID to update with a new name, description, or move it to another location.\"\n</code></pre> <p>Update or revise</p> <pre><code>/audience/{aid}:\n    put:\n        summary: \"Updates a specific audince by audience ID.\"\n</code></pre> <pre><code>/segments/ic:{integration code}:\n    put:\n        summary: \"Appends an integration code to a request to revise the audience name or description.\"\n</code></pre>"},{"location":"guide/cli/cli/","title":"Command Line Documentation","text":"<p>The command line interface (CLI) is a text-based application that lets you control a computer operating system, run programs, navigate files and directories, and manipulate files. Windows machines have 2 CLIs, the legacy Command Shell and the newer PowerShell. For Mac users, the Terminal is your CLI. Regardless of operating system, the CLI is a simple and powerful tool.</p>"},{"location":"guide/cli/cli/#writing-about-cli-commands","title":"Writing about CLI commands","text":"<p>Good CLI documentation should contain:</p> <ul> <li>The command's name</li> <li>A clear and concise definition or description</li> <li>Syntax</li> <li>Optional arguments</li> <li>Examples</li> </ul>"},{"location":"guide/cli/cli/#syntax-basics","title":"Syntax basics","text":"Name Symbol Description     Curly brackets <code>{ }</code> Delimits a set of mutually exclusive arguments when one of the arguments is required. If the arguments are optional, they are enclosed in brackets ([ ]).   Ellipsis <code>. . .</code> Indicates that you can specify multiple values for the previous argument.   Pipe <code>|</code> Indicates mutually exclusive information similar to a Boolean OR. You can use the argument to the left of the separator or the argument to the right of the separator. You cannot use both arguments in a single use of the command.   Square brackets <code>[ ]</code> Identifies an optional argument. Arguments not enclosed in brackets are required."},{"location":"guide/cli/cli/#cli-reference","title":"CLI reference","text":"<p>CLI documentation is ubiquitous. As a result, we encourage you to examine Documenting Command Line Syntax in the Google developer style guide. You won't go astray by following their style.</p>"},{"location":"guide/organization/home_code/","title":"Homepage Code Template","text":"<p>This is a sample homepage formatted in Markdown. It includes dummy links and Latin filler text. Feel free to copy this template to your preferred code editor and modify it to create your own docs homepage.</p>"},{"location":"guide/organization/home_code/#markdown-code","title":"Markdown code","text":"<pre><code># Page Title\n\n&lt;!--- Short welcome or summary description here.--&gt;\n\nWelcome to the documentation for &lt;insert name of thing here&gt;. Make this your one-stop shop for getting started, explanations of our system, and for help and support. The &lt;insert team/squad name here&gt; manages this service and documentation.\n\n## Overview section\n\n&lt;!--- Brief summary of your service here. Link to another page if it needs a longer explanation. ---&gt;\n\nIn eget auctor sem. Ut feugiat eu risus quis vehicula. Vestibulum suscipit eleifend eleifend. Pellentesque vel metus ullamcorper dolor facilisis tristique a quis dui. Sed vitae malesuada quam. Pellentesque laoreet vel orci eget ornare. Ut quis nisl dui. Sed mattis dictum massa. Morbi semper mattis viverra. In hac habitasse platea dictumst. Pellentesque quis metus ac est tempor congue.\n\nFor more information, see [Understanding Name of Thing Here](name-of-file.md).\n\n## Next steps\n\n&lt;!-- Guide your readers with recommendations. --&gt;\n\nHere's some recommended readings to help you get started with our service:\n\n- See the [Getting Started section](fake-link.md) for prerequisites and instructions.\n- New users should read the [Overview of Foo](fake-link2.md) for more information about our system.\n- Experienced users may want to review [Some link here](fake-link3.md).\n\n## Contribute\n\n&lt;!--- Optional. Tell readers how they can help with your docs or service/code ---&gt;\n\nWe're always looking for help from our peers and the larger Spotify community. If you have a feature suggestion or want to help improve our code, curabitur interdum sapien ut purus malesuada, vulputate mollis tellus aliquet. Aenean pharetra ultrices neque, ut placerat purus luctus ac. In et semper nisi, eu tristique dui.\n\nOur GHE repo is _linked name of repo here_.\n\n## Help and support\n\n&lt;!--- Contact info ---&gt;\n\nThe &lt;insert squad name here&gt; manages the Foo system. Reach out to us here if you need help or have questions:\n\n- Drop us a note in Slack at &lt;#channel name here&gt;.\n- Our group email is &lt;email address here&gt;.\n- Post a question or search for answers on Stack Overflow. Use \"_name of thing here_\" as your Stack tag for questions or searches.\n\n## Related topics\n\n&lt;!--- Optional. Links to other relevant internal or external documentation. ---&gt;\n\n- [Some Doc About This Topic](link-here.md)\n- [Another Doc About This Topic](url here)\n- [Related Blog Post](http://another.link.com)\n</code></pre> <p>And that's it. Stop writing and end the doc when you're done.</p>"},{"location":"guide/organization/home_code/#tips","title":"Tips","text":"<ul> <li> <p>Identity: When you first mention the name your team or squad, link that text to your team's space, page, or any other resource that explains who you are and what you do.</p> </li> <li> <p>Stack Overflow: If you encourage readers to ask questions in Stack Overflow, provide some descriptive text that links to Stack and includes code that auto-populates the tag field (e.g. <code>https://company_name.stackenterprise.co/questions/ask?tags=&lt;insert tag here&gt;</code>).</p> </li> </ul>"},{"location":"guide/organization/home_outline/","title":"Homepage Outline and Section Summaries","text":"<p>Here\u2019s an outline you can follow to create a basic documentation homepage. It tries to meet the goals discussed in Homepage Theory and Purpose. Take a moment to review that article if you haven't read it yet.</p>"},{"location":"guide/organization/home_outline/#sections-outlined","title":"Sections outlined","text":"<p>This outline shows you how to organize the major sections of your documentation homepage.</p> <p>I. Page title \u00a0\u00a0\u00a0\u00a0\u00a0A. Introduction or short description II. Summary III. Next steps IV. Contribute (optional) V. Help and support section VI. Related topics (optional)</p> <p>Except for the introduction/short description, you can use the outline headers as the titles of each section.</p>  <p>Tip</p> <p>For a visual overview, see the Homepage Quick Reference.</p>"},{"location":"guide/organization/home_outline/#sections-described","title":"Sections described","text":"<p>Let\u2019s take a look at the typical contents and formatting of each section in a homepage.</p>"},{"location":"guide/organization/home_outline/#page-title","title":"Page title","text":"<p>A homepage title should include or suggest the name of your service, feature, or whatever it is you\u2019re writing about. Good page tiles help readers determine if a page or section contains the information they're looking for. Here are some examples: </p> <ul> <li>Implementing Apollo Services</li> <li>Working With gRPC</li> <li>Pipeline Orchestration With Flyte</li> </ul>"},{"location":"guide/organization/home_outline/#introduction-section","title":"Introduction section","text":"<p>The introduction or short description immediately follows the page title. It should welcome the reader to your docs site and/or briefly summarize your service or page contents. Don\u2019t try to write a complete explanation of your whole system in the introduction. Save that longer discussion for the summary section or another page.</p>  <p>Style elements for an introduction section include:</p> <ul> <li>Using an H1 <code>#</code> title case title for page titles (e.g. <code># Implementing Apollo Services</code>).</li> <li>No section title. Let the page title start the short description. Just write your text.</li> <li>Complete, grammatically correct sentences.</li> </ul>"},{"location":"guide/organization/home_outline/#summary-section","title":"Summary section","text":"<p>The summary section should contain 1-3 paragraphs that provide just enough information to describe your service. If you don't use a summary on the homepage and still want to describe your service, put that text in a separate overview section.</p> <p>Use an H2 <code>##</code> sentence case title for the section headers. Text like <code>## Summary</code> or <code>## Service overview</code> are good examples of section titles.</p>"},{"location":"guide/organization/home_outline/#next-steps-section","title":"Next steps section","text":"<p>What do you do after the introduction and summary? Well, you and your team are the subject matter experts. Put that knowledge to work and provide some recommendations for your readers. The \"Next steps\" section is your opportunity to guide people to information that you think is important. For instance:</p> <ul> <li> <p>New users may want to know how to implement your system or how it works. In this case, referring them to getting started or overview content might be helpful.</p> </li> <li> <p>Experienced users might need help with a complex issue or question. Pointing them to a user guide, FAQ, or use cases could be another helpful link in this section.</p> </li> </ul> <p>Style elements for a next steps section include:</p> <ul> <li>Using an H2 <code>##</code> sentence case title for the section header (e.g.,<code>## Next steps</code>).</li> <li>A bullet list of links to helpful resources.</li> <li>Short summaries of the content you choose to highlight in this section.</li> </ul>"},{"location":"guide/organization/home_outline/#contribute-section","title":"Contribute section","text":"<p>The contribution section describes how your readers can help improve your documentation or report errors. It is optional. </p> <p>Style elements for a contribution section include:</p> <ul> <li>Using an H2 <code>##</code> sentence case title for the section header (e.g.,<code>## Contribute</code>).</li> <li>A sentence, paragraph, or instructions that tell readers how to report bugs, issues, or lend a hand.</li> </ul>"},{"location":"guide/organization/home_outline/#help-and-support-section","title":"Help and support section","text":"<p>After explaining to your readers who you are, what you do, and where to go next, provide contact information about the team that manages the service described in the documentation. Taking responsibility for your service documentation is essential. You wrote it, you own it.</p> <p>Format this section as a simple bullet list that includes things like your Slack channels, group emails, Stack Overflow, or other resources.</p> <p>Style elements include:</p> <ul> <li>Using an H2 <code>##</code> sentence case title for the section header (e.g., <code>## Help and support</code>)</li> <li> <p>Contact information (e.g., Slack, gmail, Stack Overflow, etc.) in a bullet list. Link to these when you can.</p>  <p>Stack Overflow Tip</p> <p>If your company has its own instance of Stack Overflow, link to that resource and add code that automatically populates the Tags field with a tag related to your service (e.g. <code>https://mycompany.stackenterprise.co/questions/ask?tags=&lt;add tag here&gt;</code>).</p>  </li> </ul>"},{"location":"guide/organization/home_outline/#related-topics-section","title":"Related topics section","text":"<p>The related topics section comprises simple bullet list of links to other resources that are similar to the topics covered by the page you're on. Including a related topics section is a great way to connect readers with other parts of your documentation or external documentation. It optional.</p> <p>Style elements include:</p> <ul> <li>Using an H2 <code>##</code> sentence case title for the section header (e.g., <code>## Related topics</code>, <code>Reference</code>, or <code>Further reading</code>).</li> <li>A simple bullet list of linked references. Don't use a bullet list if there's only 1 item. Just add that item under the title.</li> </ul>"},{"location":"guide/organization/home_outline/#reference","title":"Reference","text":"<p>For more information on page formatting, see the these sections :</p> <ul> <li>Page and Content Structure Quick Reference LINK TBD</li> <li>Page Titles and Section Headers Deep Dive LINK TBD</li> </ul>"},{"location":"guide/organization/home_reference/","title":"Homepage Quick Reference","text":"<p>Here's an illustration that maps the main sections of your documentation homepage.</p>   <p>Tip</p> <p>See the Homepage Outline for more information about this structure and section contents.</p>"},{"location":"guide/organization/home_theory/","title":"Homepage Theory and Purpose","text":"<p>The homepage is the main entry point for your documentation space. But it's more than just another page of documentation. In fact, the homepage is so essential that we've devoted an entire section of this guide to it. If you\u2019re stuck and aren\u2019t sure what to do, perhaps this information can get you started with a basic homepage. After reading this, we hope you learn:</p> <ul> <li>What type of content to include on your homepage.</li> <li>How to organize your homepage.</li> <li>How to format your homepage.</li> </ul> <p>You should feel free to modify this design as you become more comfortable with writing or to suit your documentation needs. </p>"},{"location":"guide/organization/home_theory/#theory-and-purpose","title":"Theory and purpose","text":"<p>It might help you to think of the homepage for your docs as a space similar to the waiting area in an airport or train station. These places are filled with people passing through quickly on their way to a particular destination. As a result, the information displayed in lobby areas should be brief but informative.</p> <p>Help me get to where I need to go.</p> <p>Like a physical lobby area, your documentation homepage is also a transitional space. But, instead of flying off to a business or holiday destination, a homepage guides readers to specific pages or sections in your documentation. Your homepage isn\u2019t the destination itself. It is a page that helps readers get to their real destination, i.e., the information they need to understand a service or to complete a task. As a result, you should try to create a documentation homepage that scores a few important goals for your readers.</p>"},{"location":"guide/organization/home_theory/#goals","title":"Goals","text":"<p>A good documentation homepage:</p> <ul> <li> <p>Summarizes your system, app, or service in a concise paragraph. If you need more room to write, create and link to a separate \"Overview\" section or page from the homepage.</p> </li> <li> <p>Recommends and links to sections of your documentation or to individual articles. Be opinionated. Tell your readers if you think something is important to know because it probably is!</p> </li> <li> <p>Identifies communication channels. Tell readers who owns/manages your docs, where to ask questions or report errors, and (optionally) how to help make contributions or get involved.</p> </li> </ul>"},{"location":"guide/organization/home_theory/#next-steps","title":"Next steps","text":"<p>Enough theory! Let\u2019s try to put these ideas into practice by creating an outline that meets the minimum goals we've set for a documentation homepage. See the Homepage Outline and Section Summaries next. </p>"},{"location":"guide/organization/org_adr/","title":"ADRs","text":"<p>As described in this blog post, \"Documenting Architecture Decisions\", an Architectural Decision Record (ADR) logs the important changes to your code and documents the consequences of that change.</p>"},{"location":"guide/organization/org_adr/#when-to-use","title":"When to use","text":"<p>Add an ADR section to your documentation if you want to:</p> <ul> <li>Record the thinking and decision making process behind significant code or other changes.</li> <li>Create an archive that new squad-mates can review.</li> </ul> <p>We often forget (or are unaware of) how code or a system got created and how it evolved to its current state. ADR documents become the history of your project. Better historical knowledge may help you understand the past, the present, and plan for the future.</p>"},{"location":"guide/organization/org_adr/#contents-and-organization","title":"Contents and organization","text":"<p>The following table lists and defines the common sections in a typical architectural decision record.</p>    Section Description     Date The date a change or decision was reached.   Status Classifies the state of an architectural decision (e.g., proposed, accepted, deprecated, superseded, etc.).   Context Describes the conditions, background, problems that prompted particular design decision.   Decision Describes the change, update, or fix itself in response to the context.   Consequences Describes the outcome of a particular decision."},{"location":"guide/organization/org_adr/#location","title":"Location","text":"<p>Put your ADRs at the end of your documentation, after the FAQ section if used. To organize content properly, edit your <code>mkdocs.yml</code> file as shown below.</p> <pre><code>nav:\n  - Home: index.md\n  - Overview: &lt;file-path&gt;/&lt;file-name.md&gt;\n  - Getting Started: &lt;file-path&gt;/&lt;file-name.md&gt;\n  - . . .\n  - FAQs: &lt;file-path&gt;/&lt;file-name.md&gt;\n  - ADRs: &lt;file-path&gt;/&lt;file-name.md&gt;\n</code></pre>"},{"location":"guide/organization/org_adr/#adr-introduction-page","title":"ADR introduction page","text":"<p>Sometimes readers are not familiar with the ADR concept. As a result, it is helpful to start your ADR section with an introduction. Here's a template you can use to start an ADR section.</p> <pre><code># Introduction\n\nMaintaining a record of design decisions helps provide historical context for developers and users who work with our service.\n\n## Design\n\nThe documents in our archive follow the standards described in [Documenting Architecture Decisions](https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions), an external blog post.\n\n## Record structure\n\nThe following table lists and defines the common sections in a typical architectural decision record.\n\n| Section   | Description |\n|-----------|-------------|\n| **Date**         | The date a change or decision was reached.       |\n| **Status**       | Classifies the state of an architectural decision (e.g., proposed, accepted, deprecated, superseded, etc.).|\n| **Context**      | Describes the conditions, background, problems that prompted particular design decision.|\n| **Decision**     | Describes the change, update, or fix itself in response to the context.|\n| **Consequences** | Describes the outcome of a particular decision.|\n</code></pre>"},{"location":"guide/organization/org_faqs/","title":"FAQs","text":"<p>Frequently asked questions (FAQ) provide answers to common questions.</p>"},{"location":"guide/organization/org_faqs/#when-to-use","title":"When to use","text":"<p>Create a FAQ if you start to get a lot similar questions over and over again. Or, you could create a FAQ to anticipate possible questions.</p>  <p>Use Stack as a FAQ</p> <p>Consider replacing the FAQ with Stack Overflow. For example, you could put some text on your homepage or FAQ page that encourages people to ask and answer questions on Stack Overflow. This transforms a static question and answer format into a dynamic Stack Overflow conversations with your users. For example, you could do something like this on a page:</p> <pre><code>[Post a question](https://company_name.stackenterprise.co/questions/ask?tags=&lt;insert tag here&gt;) or search for answers on Stack Overflow. Use \"&lt;insert tag here&gt;\" as your Stack tag for questions or searches.\n</code></pre>"},{"location":"guide/organization/org_faqs/#contents-and-organization","title":"Contents and organization","text":"<p>A FAQ consists of text arranged in a question and answer format. </p> <ul> <li> <p>Format your questions as H2 or H3 headers. This makes them easy to scan and more visible than plain text. Also, TechDocs uses the headers to create a page-level table of contents that appears on the right side of the screen.</p> </li> <li> <p>Write your answers in plain text below the question. For style points, indent the answer several spaces under the question header. This makes each question/answer pair look like a unified block separate from the other entries.</p> </li> </ul>"},{"location":"guide/organization/org_faqs/#location","title":"Location","text":"<p>The FAQ is one of the last chapters in you'll write. It belongs at or near the end of your documentation space.</p> <p>To organize content properly, edit your <code>mkdocs.yml</code> file as shown below.</p> <pre><code>nav:\n  - Home: index.md\n  - Overview: &lt;file-path&gt;/&lt;file-name.md&gt;\n  - Getting Started: &lt;file-path&gt;/&lt;file-name.md&gt;\n  - . . .\n  - FAQs: &lt;file-path&gt;/&lt;file-name.md&gt;\n</code></pre>"},{"location":"guide/organization/org_getting_started/","title":"Getting Started","text":"<p>The getting started section provides information about how to start using your service. Also, make it a top-level section in your documentation, don't bury getting started information as a subsection with other content in a parent container. Make it easy for your readers to, well, get started with using your awesome feature or service.</p>"},{"location":"guide/organization/org_getting_started/#when-to-use","title":"When to use","text":"<p>Include a \"Getting Started\" section in your documentation when you have a service or system that requires a multi-step configuration process. Basically, if your users need to do step 1, 2, 3, etc. before they can use whatever it is you've built, put that information in this section.</p>"},{"location":"guide/organization/org_getting_started/#contents-and-organization","title":"Contents and organization","text":"<p>The getting started section should contain task documentation only. Task docs are procedures that provide step by step instructions on how to use the thing you're writing about. For information about task docs, see the Technical Writing Handbook sections on:</p> <ul> <li>Documentation for Simple Procedures</li> <li>Documentation for Complex Procedures </li> </ul>"},{"location":"guide/organization/org_getting_started/#location","title":"Location","text":"<p>A \"Getting Started\" section is the either the second or third chapter in your documentation. For example, \"Getting Started\" is:</p> <ul> <li>The second chapter in your docs if you don't have an Overview section.</li> <li>The third chapter in your docs if you do have an \"Overview\" section (place it after the \"Overview.\")</li> </ul> <p>To organize content properly, edit your <code>mkdocs.yml</code> file as shown below.</p> <pre><code># This example doesn't have an \"Overview\" section.\nnav:\n  - Home: index.md\n  - Getting Started: &lt;file-path&gt;/file-name.md&gt;\n</code></pre> <pre><code># This example has an \"Overview\" section.\nnav:\n  - Home: index.md\n  - Overview: &lt;file-path&gt;/&lt;file-name.md&gt;\n  - Getting Started: &lt;file-path&gt;/&lt;file-name.md&gt;\n</code></pre> <pre><code># This example uses a parent container for multiple child docs.\nnav:\n  - Home: index.md\n  - Overview: &lt;file-path&gt;/&lt;file-name.md&gt;\n  - Getting Started:\n    - Task 1: &lt;file-path&gt;/&lt;file-name.md&gt;\n    - Task 2: &lt;file-path&gt;/&lt;file-name.md&gt;\n</code></pre>  <p>Tip</p> <p>For more information about the <code>mkdocs.yml</code> file and how it creates the TOC, see the Table of Contents Deep Dive LINK TBD.</p>"},{"location":"guide/organization/org_intro/","title":"Introduction","text":"<p>This section of the writing guide is designed to help engineering teams organize new documentation or revise the structure of an existing content repo. Here our guide:</p> <ul> <li> <p>Suggests an ideal organizational hierarchy for each of the main sections in your documentation.</p> </li> <li> <p>Lists and describes the purpose of each main section in a well-ordered documentation space.</p> </li> <li> <p>Outlines the sections and content within important individual pages in your documentation.</p> </li> </ul> <p>You may have other ideas about how to organize documentation. If that\u2019s the case, fantastic! We encourage you to act on those thoughts and go for it. Let that passion and vision come out in your content organization and writing. However, we still encourage you to review this guide. Something here may help refine or improve the structure of your documentation.</p>"},{"location":"guide/organization/org_intro/#next-steps","title":"Next steps","text":"<p>Here are some recommendations:</p> <ul> <li> <p>Start with the Section Outline. It provides and organizational blueprint for main sections of a documentation space.</p> </li> <li> <p>Next, review Homepage Theory and Purpose. It discusses the importance of a good homepage and guides you to other documents that show you how to create an effective and helpful homepage.</p> </li> <li> <p>Finally, just browse sections that seem interesting or relevant to the documentation issues you or your team are struggling with.</p> </li> </ul>"},{"location":"guide/organization/org_intro/#help-and-support","title":"Help and support","text":"<p>Placeholder for boilerplate help text.</p>"},{"location":"guide/organization/org_other/","title":"Other Content Sections","text":"<p>These are sections and pages that comprise the the bulk of your documentation. Here are 2 examples.</p>"},{"location":"guide/organization/org_other/#example-1","title":"Example 1","text":"<p>You could put this general documentation in sections that are titled after the topics that most of the docs cover. For example, look at this table of contents used by the Storage team.</p>  <p>Notice how each of the top level sections are titled based on the topic of their contents (e.g. Cloud Bigtable, Cloud Spanner, Cloud SQL). All of these are \"other\" type sections organized by topic.</p>"},{"location":"guide/organization/org_other/#example-2","title":"Example 2","text":"<p>Here's another example from the gRPC team. They've put content under a top level parent titled \"User Guide.\" This is yet another way to organize the general mass of pages in your Backstage space.</p>  <p>Aside from these examples, it's up to you to organize this \"middle part\" of your documentation. Reach out to the technical writers if you have any questions. We're on Slack at #tech-writing.</p>"},{"location":"guide/organization/org_outline/","title":"Section Outline","text":"<p>Here\u2019s a blueprint to follow when you\u2019re not sure about how to organize your documentation space or what kind of sections you should include. These are recommendations, not rules or requirements. If you have a good docs structure that works, keep it. If you're not sure what to do try using the simple outline shown here.</p>"},{"location":"guide/organization/org_outline/#section-outline_1","title":"Section Outline","text":"<p>The outline below provides a suggested table of contents (TOC) for a documentation space. Each main section can be a standalone parent page or a parent object that contains child pages.</p> <p>I.\u00a0\u00a0\u00a0\u00a0Homepage/landing page II.\u00a0\u00a0\u00a0Overview III.\u00a0\u00a0Getting Started IV.\u00a0\u00a0Other content V.\u00a0\u00a0\u00a0FAQs VI.\u00a0\u00a0ADRs</p>  MkDocs and the TOC <p>We're using MkDocs to build and organize the space and content you're reading now. For anyone using MkDocs, you edit the <code>mkdocs.yml</code> file to add, delete, and reorganize the content hierarchy in your documentation space. LINK TBD</p>"},{"location":"guide/organization/org_outline/#next-steps","title":"Next steps","text":"<p>Browse the Sections content for information about each of these main documentation components.</p>"},{"location":"guide/organization/org_overview/","title":"Overview","text":"<p>The overview section gives you extra room to write about your service or product. You can make it one page long or create a parent/child section that contains multiple pages. Length depends on how much information you want to provide. If you use an overview, organize it as the second top-level section in the table of contents (TOC) after the homepage. Overviews are optional parts of your Backstage documentation.</p>"},{"location":"guide/organization/org_overview/#when-to-use","title":"When to use","text":"<p>You should consider adding an overview when:</p> <ul> <li> <p>A service is too complex or contains subtle nuances that can't easily be described in the summary section of your homepage documentation.</p> </li> <li> <p>Your readers would benefit from a longer, high-level, strategic discussion about your service and something that plunges them into a tactical deep dive about how things work. </p> </li> <li> <p>You think it is important or helpful to your documentation.</p> </li> </ul>"},{"location":"guide/organization/org_overview/#contents-and-organization","title":"Contents and organization","text":"<p>An overview section tells your readers why you created a service and how it works. Length and the amount of detail depends on how much you want to write. At its core, an overview is a concept document. It should include text and visual elements appropriate for that type of content.</p>"},{"location":"guide/organization/org_overview/#location","title":"Location","text":"<p>An overview is the \u201csecond chapter\u201d in your documentation. Place it in the TOC after the homepage. To organize content properly, edit your <code>mkdocs.yml</code> file as shown below.</p> <pre><code>nav:\n  - Home: index.md\n  - Overview: &lt;file-path&gt;/&lt;file-name.md&gt;\n  - # Other sections here\n</code></pre>  <p>Tip</p> <p>For more information about the <code>mkdocs.yml</code> file and how it creates the TOC, see the Table of Contents Deep Dive LINK TBD.</p>"},{"location":"guide/style/style_bold/","title":"Bold Text","text":""},{"location":"guide/style/style_bold/#common-use-ui-controls","title":"Common use - UI controls","text":"<p>Use bold formatting in text when describing a user interface (UI) elements or controls. This includes things like buttons, dropdown menu items, option buttons or boxes, or anything a user can click on or interact with.</p>"},{"location":"guide/style/style_bold/#other-uses","title":"Other uses","text":"<p>You can also use bold text for:</p> <ul> <li> <p>A word or phrase that starts a bullet list.</p>  <p>Example</p> <ul> <li>Autoscaler: A system that scales databases without human intervention.</li> <li>Backup Scheduler: A system that creates automated daily backups. </li> </ul>  </li> <li> <p>Text in the first column of a table.</p>  <p>Example</p>    Element Description     Date yyyy-mm-dd format   Time hh\\:mm:ss format     </li> </ul>"},{"location":"guide/style/style_bold/#bold-vs-italics-for-emphasis-or-stress","title":"Bold vs italics for emphasis or stress","text":"<p>Our preference is to use italics to place stress, emphasis, or importance on a word or phrase. Don't use bold text for emphasis. </p>  <p>Call-outs</p> <p>If you think some text needs special attention, put that information in a call-out. Call-outs are text items like a \"Tip\", \"Warning\", \"Note\", or \"Info\" box. See the Admonition extensions for a list of supported call-out  types in MkDocs.</p>  <p>To sum up, italics should be limited/used to:</p> <ul> <li>Put emphasis or stress on important text.</li> <li>Introduce a new word or phrase (on first mention only).</li> <li>Represent a placeholder for unknown text or content. For example, \"See content TBD for more information.\"</li> <li>As a style indicator for brief foreign language phrases, particularly Latin (e.g., id est, exempli grata, inter alia).</li> </ul> <p>See also, Italics.</p>"},{"location":"guide/style/style_bold/#standards-for-reference","title":"Standards for reference","text":"<p>These rules are based upon the DITA standards for technical writing. DITA is a set of rules for documentation types, content, and a XML library for tagging text. The DITA framework prefers bold text for content describing GUI/UI controls that users interact with. See the DITA uicontrol specification:</p>  <p>The user interface control (<code>&lt;uicontrol&gt;</code>) element is used to mark up names of buttons, entry fields, menu items, or other objects that allow the user to control the interface. . . . This element is part of the DITA user interface domain, a special set of DITA elements designed to document user interface tasks, concepts and reference information.</p>"},{"location":"guide/style/style_code/","title":"Code Snippets and Blocks","text":"<p>Adding code samples to documentation can help improve reader understanding. This site supports the basic Markdown syntax for short code snippets or longer code blocks. It also uses the CodeHilite extensions to support code-specific syntax coloration.</p>"},{"location":"guide/style/style_code/#snippets","title":"Snippets","text":"<p>Add a single backquote/back-tick <code>`</code> symbol before and after a small code segment to identify it as code or set it apart from regular text, like this:</p> <p>Here's a <code>code_snippet</code> in a sentence.</p>"},{"location":"guide/style/style_code/#blocks","title":"Blocks","text":"<p>To format a large, multi-line code block, add 3 backquote/back-tick marks <code>```</code> before and after a section you want to identify as code. You can also specify the code language after the tick marks to add syntax coloring to a sample.</p> <p>Here's an example for an  HTML code block.</p> <pre><code>&lt;form action=\"#\" method=\"post\"&gt;\n    &lt;div&gt;\n         &lt;label for=\"name\"&gt;Text Input:&lt;/label&gt;\n         &lt;input type=\"text\" name=\"name\" id=\"name\" value=\"\" tabindex=\"1\" /&gt;\n    &lt;/div&gt;\n\n    &lt;div&gt;\n         &lt;h4&gt;Radio Button Choice&lt;/h4&gt;\n\n         &lt;label for=\"radio-choice-1\"&gt;Choice 1&lt;/label&gt;\n         &lt;input type=\"radio\" name=\"radio-choice-1\" id=\"radio-choice-1\" tabindex=\"2\" value=\"choice-1\" /&gt;\n\n     &lt;label for=\"radio-choice-2\"&gt;Choice 2&lt;/label&gt;\n         &lt;input type=\"radio\" name=\"radio-choice-2\" id=\"radio-choice-2\" tabindex=\"3\" value=\"choice-2\" /&gt;\n    &lt;/div&gt;\n</code></pre> <p>Here's an example for a JavaScript code block.</p> <pre><code>var File = function(url, object){\n    File.list = Array.isArray(File.list)? File.list : [];\n    File.progress = File.progress || 0;\n    this.progress = 0;\n    this.object = object;\n    this.url = url;\n};\n</code></pre>"},{"location":"guide/style/style_intro/","title":"Introduction","text":"<p>This section provides recommendations on how to write and style specific page and text elements. These recommendations are based on our experience of working with engineering teams on documentation. This advice tries to address issues that appear often in draft, work-in-progress content.</p> <p>Your Friends at the Guide\u2122 believe these guidelines help promote good writing. However, like the pirate code, sometimes rules are rules and sometimes they\u2019re just suggestions. Occasionally, you might need to bend or break them. That\u2019s OK too. Whatever you decide to do, just be consistent in doing it.</p>"},{"location":"guide/style/style_italics/","title":"Italic Text","text":""},{"location":"guide/style/style_italics/#common-use-emphasis","title":"Common use - Emphasis","text":"<p>Format text with italics when you want to place stress, emphasis, or importance on a word or phrase. Do not use bold text for emphasis.</p>  <p>Call-outs</p> <p>If you think some text needs special attention, put that information in a call-out. Call-outs are text items like a \"Tip\", \"Warning\", \"Note\", or \"Info\" box. See the Admonition extensions for a list of supported call-out  types in MkDocs.</p>"},{"location":"guide/style/style_italics/#other-uses","title":"Other uses","text":""},{"location":"guide/style/style_italics/#unique-words-terms-or-phrases","title":"Unique words, terms, or phrases","text":"<p>When you introduce a unique word or phrase, consider putting that text in italics on first mention and use plain text thereafter. This is optional. Here are some examples:</p> <ul> <li>Acceptable: A Unique User ID  . . .</li> <li>Acceptable: A Unique User ID . . .</li> <li>Avoid:  A Unique User ID . . .</li> </ul>"},{"location":"guide/style/style_italics/#as-a-placeholder","title":"As a placeholder","text":"<p>You can put text in italics as a placeholder or temporary text for content that has not been written yet or as a variable. For example:</p> <p>\"To implement this process, see documentation TBD.\"</p>"},{"location":"guide/style/style_italics/#foreign-language-phrases","title":"Foreign language phrases","text":"<p>You can use italics as a style indicator for brief foreign language phrases, particularly Latin (e.g., id est, exempli grata, inter alia). You don't need to do this with abbreviations.</p>"},{"location":"guide/style/style_italics/#standards-for-reference","title":"Standards for reference","text":"<p>These rules are based upon the  DITA standards for technical writing. This is a set of rules for documentation types, content, and a XML library for tagging text. The DITA framework uses italics for text that is important or needs emphasis. See the DITA specification for italics:</p>  <p>Italic highlighting generally means a font that is slanted for emphasis, but this may vary depending on your output formatting process.</p>"},{"location":"guide/style/style_lists/","title":"Lists","text":"<p>Recommendations on formatting and using lists in your documentation.</p>"},{"location":"guide/style/style_lists/#bullet-lists","title":"Bullet lists","text":"<p>Use a bullet list when the item order or sequence is not important or required to complete a process. You can also arrange bullet list items in:</p> <ul> <li>Alphabetical order if there's no specific importance or relationship among the listed items.</li> <li>A specific order if you want to imply relative importance or a relationship among the listed items.</li> <li>Ascending order by word count. This imparts a visually pleasing shape to a list block that makes it look clean and neat.</li> </ul>"},{"location":"guide/style/style_lists/#numbered-lists","title":"Numbered lists","text":"<p>Use a numbered list when the item order or sequence is important or required to complete a process.</p>  <p>Tip</p> <p>When using a numbered list to describe steps, you don't need to indicate sequence in your text. For example, avoid writing lists like this:</p>  <ol> <li>First, complete process A.</li> <li>Next, activate process B.</li> <li>Third, click button C.</li> </ol>  <p>Text that tells readers a step is \"first,\" \"second,\" \"third,\" or \"last,\" is unnecessary in an ordered list. Eliminate a word and let the numbers do that work for you.</p>"},{"location":"guide/style/style_lists/#formatting-list-text","title":"Formatting list text","text":"<p>When you want to use a list:</p> <ul> <li> <p>Place a colon at the end of the text or sentence fragment that introduces a list. Here's an example:</p>  <p>The following reports are available:</p> <ul> <li>Report 1</li> <li>Report 2</li> <li>Report 3</li> </ul>  </li> <li> <p>Start each list item with a capital letter. Use a lower case letter if that's the formal name of an item (e.g., iPad, eMail) or as required to maintain accuracy.</p> </li> <li> <p>Avoid creating a list that includes sentence fragments and complete sentences. It is OK to do this if there's no other way. Sometimes you just have to, but try not to.</p> </li> <li> <p>Do not create a list that has one bullet or numbered item only. If you're doing this to highlight something important, consider putting that text in a note, tip, or warning call-out or an expand/collapse block. In technical writing, there's no such thing as a list with one bullet or numbered item. Lists must include 2, or more, items.</p> </li> </ul>"},{"location":"guide/style/style_lists/#simple-or-single-item-lists","title":"Simple or single-item lists","text":"<p>If your list is a simple enumeration of items that would normally create a single sentence, capitalize each list item and omit the punctuation. Here's an example:</p>  <p>The pop-up window contains 3 buttons:</p> <ul> <li>Save</li> <li>Save all</li> <li>Cancel</li> </ul>  <p>Do not punctuate enumerated list items as if they're part of a sentence. Here's an example:</p>  <p>The pop-up window contains 3 buttons:</p> <ul> <li>Save,</li> <li>Save all, and</li> <li>Cancel.</li> </ul>"},{"location":"guide/style/style_lists/#lists-with-complete-sentences","title":"Lists with complete sentences","text":"<p>If your list items are complete sentences, follow the rules of capitalization, punctuation, and grammar. Here's an example:</p>  <p>Before you activate a campaign:</p> <ul> <li>Make sure that the creatives, line items, and insertion order are all active.</li> <li>Verify that pixels are active and associated with the correct line items.</li> <li>Add start and end dates to the line item.</li> </ul>"},{"location":"guide/style/style_lists/#nested-lists","title":"Nested lists","text":"<p>Nested lists are lists that contain bulleted or numbered sub-lists. In technical writing, nested lists are acceptable and often necessary. For example, as shown in Task Documentation for Simple Procedures, sometimes you need a nested list to describe the options in a set of instructions like this:</p>  <ol> <li>Click New Widget. This opens the New Widget Window.</li> <li>In the New Widget window:<ul> <li>Name your widget.</li> <li>Identify the widget owner.</li> <li>Choose an application type.</li> <li>Write a brief description.</li> </ul> </li> <li>Click Save.</li> </ol>  <p>The bulleted items in step 2 are in an unordered, nested list. They're essential and helpful in this case.</p>"},{"location":"guide/style/style_lists/#formatting-nested-lists","title":"Formatting nested lists","text":"<p>TechDocs is built on pymarkdown, which closely follows the Markdown syntax for lists.</p> <p>To create a nested ordered or unordered list, just indent 4-spaces under a list item as shown in the following examples.</p> <pre><code>&lt;!--- Ordered list with unordered, nested bullets ---&gt;\n\n1. Numbered item\n1. Numbered item\n    - Bulleted item\n    - Bulleted item\n1. Numbered item\n</code></pre> <pre><code>&lt;!--- Unordered list with ordered, nested numbers ---&gt;\n\n- Bulleted item\n- Bulleted item\n    1. Numbered item\n    1. Numbered item\n- Bulleted item\n</code></pre>  <p>Tip</p> <p>Indent paragraphs, images, and call-out boxes when you need to keep these objects aligned with your list items and text.</p>"},{"location":"guide/style/style_lists/#keep-lists-simple","title":"Keep lists simple","text":"<p>Nested lists become awkward and difficult to read when they go beyond 2 or 3 levels deep. For example, this list is a clumsy way to convey information:</p>  <ol> <li>Do this.</li> <li>Do that with some options:<ul> <li>Option 1</li> <li>Option 2<ul> <li>Something else here.</li> <li>And one more thing.</li> <li>Don't forget this either.<ul> <li>Hey, we're here too.</li> <li>Going even deeper.</li> <li>This is getting awkward.</li> </ul> </li> </ul> </li> <li>Option 3</li> </ul> </li> <li>Final item.</li> </ol>"},{"location":"guide/style/style_lists/#alternatives-to-nested-lists","title":"Alternatives to nested lists","text":"<p>When you start to create deeply nested lists, stop for a moment and think about how you're trying to convey information. Lists with 3rd, 4th, or Nth level nesting might not be an effective way to explain something or describe a procedure. Instead of a sub-list, try putting that information:</p> <ul> <li> <p>In another H2 or H3 titled section on the the same page. You might even want to add an anchor link to connect the list item to the new section.</p> </li> <li> <p>On a new, separate page that you link to from the main list.</p> </li> <li> <p>In a call-out box or expand/collapse block under a list item.</p> </li> </ul> <p>These options give you room to write and eliminate the need to stuff text into an awkward set of nested lists.</p>"},{"location":"guide/types/concepts/","title":"Concept Documentation","text":"<p>Concept documentation explains and describes. For example, you might write a concept piece to explain an idea at a high level or describe why your team created a particular system. Conceptual content can also include detailed information or a strategic analysis of a product or service. Write concept docs to tell readers why you created something rather than how to use it.</p>"},{"location":"guide/types/concepts/#features","title":"Features","text":"<p>Common features of concept documentation include:</p> <ul> <li> <p>Descriptive titles that suggest or summarize the main topics.</p> </li> <li> <p>Sections of related content separated by informative headers.</p> </li> <li> <p>Notes, tips, warnings, and other call-outs that focus attention on important items.</p> </li> <li>Numbered or bulleted lists that do not enumerate procedures or task steps.</li> <li>Tables</li> <li>Images and diagrams</li> <li>Code samples</li> </ul>"},{"location":"guide/types/concepts/#style-advice","title":"Style advice","text":"<p>Write concept documentation in the present tense and use the active voice. This style is\u00a0ideal for expressing facts and helps make\u00a0writing authoritative. Content\u00a0that is accurate and frank builds user trust in your documentation and products.</p> <p>Additionally, present-tense writing imparts a \u201ctimeless\u201d quality to your documentation. Timelessness is important because you don\u2019t want documentation to read as stale or dated as time passes. For example, even if the code underlying a system changes, the purpose of a system may remain the same. With the present tense, your content remains valid and accurate even after you refactor code. Save yourself from future work. Write in the present tense.</p>"},{"location":"guide/types/concepts/#what-to-avoid","title":"What to avoid","text":"<p>Conceptual documentation shouldn't contain tasks, procedural steps, or reference information. Task and reference content are separate topic types. Documentation for these topics follow a different set of standards.</p>"},{"location":"guide/types/reference/","title":"Reference Documentation","text":"<p>Reference documentation explains, lists, and describes or defines features like buttons, menu options, code, dataset fields, API functions, and architectural decision records (ADRs). You write reference documents to help your users better understand the details of individual components of a product or system.</p>"},{"location":"guide/types/reference/#features","title":"Features","text":"<p>Common features of a reference document include:</p> <ul> <li> <p>Descriptive titles that suggest or summarize the main topics.</p> </li> <li> <p>A multi-column table that lists terms and their corresponding definitions. A basic, 2-column term and definition layout is sufficient.</p> </li> </ul>"},{"location":"guide/types/reference/#style-advice","title":"Style advice","text":"<p>Keep your reference docs simple. Written content should consist mainly of a term and its related definition. Tables are great for reference material.</p> <p>When defining dataset fields, file names, or code, use formatting that gives each term a <code>code-like</code> appearance and use plain text definitions. If you're not writing about code, just use plain text.</p>"},{"location":"guide/types/reference/#what-to-avoid","title":"What to avoid","text":"<p>Long-form conceptual content or task topics don't belong in a reference document. Link to those documents rather than stuffing unrelated information in a reference document.</p> <p>Try to keep table columns to a minimum. If you need more than 3 or 4 columns, think about combining that content or using another layout.</p>"},{"location":"guide/types/tasks_complex/","title":"Task Documentation for Complex Procedures","text":"<p>Complex procedures are tasks that require, say, 6 (or more) steps to complete. And, similar to a simple task, you explain how to do something rather than why you created it.</p>"},{"location":"guide/types/tasks_complex/#examples","title":"Examples","text":"<p>For tasks that require a lot of steps, organize the instructions into short sections and restart the step numbers in each new section. Here's an example of how to write a long, complex task document.</p>"},{"location":"guide/types/tasks_complex/#features","title":"Features","text":"<p>Task documentation for long, complex procedures includes the same textual components as a simple task documents. These include:</p> <ul> <li>Separating steps into related sections.</li> <li> <p>Numbered steps (if steps must be completed sequentially). Restart the numbering in each section.</p> </li> <li> <p>Bulleted steps (if steps don't need to follow in sequential order).</p> </li> <li> <p>Step options and step results.</p> </li> <li> <p>Images.</p> </li> </ul>"},{"location":"guide/types/tasks_complex/#style-advice","title":"Style advice","text":"<p>Group related sets of steps together. For example, maybe your process begins with steps that require you to name and describe something. Later steps may require connecting to data sets or identifying external customers. Organize related steps into their own sections and identify that part of the process with a logical section header. See also, the style advice in Documentation for Simple Procedures.</p>"},{"location":"guide/types/tasks_simple/","title":"Documentation for Simple Procedures","text":"<p>Task documentation breaks down a workflow into the sequential or non-sequential steps required to complete a process. Write task docs to explain how to use the thing you built rather than why you created it.</p>"},{"location":"guide/types/tasks_simple/#structure","title":"Structure","text":"<p>This diagram demonstrates how to organize a simple task document:</p>   <p>Important</p> <p>Describing each step in a task is essential. This includes obvious steps like \"Click Save.\" After all, simple actions might not be self-evident so you need to include them. For your readers, few things are more maddening than vague or incomplete instructions. You just gotta do it.</p>"},{"location":"guide/types/tasks_simple/#features","title":"Features","text":"<p>Common features of task documentation include:</p> <ul> <li>Descriptive titles that suggest or summarize the main topic.</li> <li>Numbered steps (if steps must be completed sequentially).</li> <li>Bold text for UI elements that you interact with. See the section on Bold Text LINK TBD.</li> <li>Bulleted steps (if steps don't need to follow in sequential order).</li> <li>The text \"(Optional)\" at the beginning of a step to indicate that it isn't required.</li> <li>Images.</li> <li>Separate sections to break up long procedures. See also Documentation for Complex Procedures.</li> </ul>"},{"location":"guide/types/tasks_simple/#style-advice","title":"Style advice","text":"<p>When writing task documentation:</p> <ul> <li> <p>Start the document title with a verb that matches the procedure (e.g., Create, Build, Configure, Implement, etc.). This indicates the document's type (task) and content (steps on how to do something).</p> </li> <li> <p>Start the procedure right away. Avoid long introductions or overviews (use a concept page for that). It is OK to note task pre- and post-requisites or provide context, but try to start the task steps quickly.</p> </li> <li> <p>Start each step using a verb in the imperative mood. For example, \"Click this,\" \"Select that,\" \"Choose X.\" Procedural steps are commands, not requests.</p> </li> <li> <p>Link to other docs that describe step options or strategies. You can list the options (try bullets), but don't clutter up instructions with extensive explanations. Put that information in a separate document.</p> </li> <li> <p>Follow the advice in Writing About UI Controls LINK TBD when describing user interactions with UI features.</p> </li> </ul>"},{"location":"guide/types/tasks_simple/#what-to-avoid","title":"What to avoid","text":"<p>Don't start your task doc with a long introduction or \"overview\" content. Put this information in a separate concept document. Remember, your users read task documents to complete a process. They want instructions. Don't bury the steps under a long introduction.</p>"},{"location":"guide/types/types_intro/","title":"Topic-Based Writing and Document Types","text":"<p>Topic-based writing reduces documentation for complex systems, processes, or workflows into discrete content categories or types. With a topic-based approach, each page covers a single topic only (1 page = 1 topic).</p>"},{"location":"guide/types/types_intro/#topic-types","title":"Topic types","text":"<p>You can organize documentation into 4 main topic types.</p>"},{"location":"guide/types/types_intro/#types-and-contents","title":"Types and contents","text":"<p>Each topic type contains specific information that the others don't. Excluding content based on topic helps you write because you don\u2019t have to include\u00a0everything\u00a0in one long article. Let\u2019s review the basic characteristics of each type.</p>    Type Contents     Concept Concept documents explain ideas and describe how things work. Think of a concept piece as a deep, substantial, and informative discussion with your colleagues. A concept document doesn't contain task steps or procedures. See Concept Documentation for writing advice and examples.   Task Task documents provide step-by-step instructions that show you how to complete a procedure. They organize content into ordered or unordered lists. A task document doesn't include long blocks of conceptual information. See Documenting Simple Procedures or Documenting Complex Procedures for writing advice and examples.   Reference Reference documents list and define or describe things (e.g., UI features, dataset fields, glossary terms, API methods, FAQs, ADRs. These are hybrid documents because they can include information found in the other document types. See Reference Documentation for writing advice and examples.   Tutorials Tutorials are a mixed document type. They can include the information found in all the other document types. This guide does not cover tutorials."},{"location":"guide/types/types_intro/#help-and-support","title":"Help and support","text":"<p>Placeholder for generic help text and links.</p>"},{"location":"resume/resume/","title":"Joe Wojak","text":""},{"location":"resume/resume/#about","title":"About","text":"<p>I\u2019m a technical writer with experience in creating documentation for external customers and internal engineering teams. I\u2019ve managed large, established documentation libraries and created original documentation for new systems and services. My writing philosophy is to treat documentation like code. This means writing with open-source systems that accommodate community input and help reduce the documentation burden on developers.</p>"},{"location":"resume/resume/#experience","title":"Experience","text":"<p>This is a selected chronology of my work experience. Download my resume for a PDF version of this information.</p>"},{"location":"resume/resume/#spotify","title":"Spotify","text":"<p>Senior Technical Writer, 2017-2022</p> <ul> <li>Wrote developer-facing documentation for Spotify\u2019s internal system architecture. Content improved understanding among engineering teams about using internal services and how Spotify ad serving systems worked.  </li> <li>Wrote and revised training tutorials for engineers. Changes improved accuracy, trust, content adoption, and reduced confusion.</li> <li>Created The Spotify Technical Writing Handbook, a writing and style guide for developers. Adoption helped standardize writing style and organization in Spotify\u2019s internal documentation system.</li> <li>Revised and managed company glossary. Changes improved content organization, definitions, weekly revisions, and included a search feature.</li> <li>Recorded tutorial videos about how to write and use Spotify\u2019s internal documentation system.</li> <li>Helped create a technical writing guild. The guild coordinated writing projects and promoted technical documentation at Spotify.</li> <li>Writing tools: MkDocs, Markdown, GitHub, JIRA, Trello, Confluence, Coda, Loom (video), Google docs.</li> </ul>"},{"location":"resume/resume/#adobe-systems-again","title":"Adobe Systems (again)","text":"<p>Senior Technical Writer, 2015-2017</p> <ul> <li>Returned to Adobe to write and manage documentation for Audience Manager. Efforts brought neglected documentation up-to-date, added API content, and eliminated issue backlog.</li> <li>Created and organized documentation for the Marketing Cloud ID Service and the Marketing Cloud Device Co-Op. Efforts reduced support demands and allowed customers to work with these systems in a self-service manner.</li> <li>Mentored and collaborated with a junior technical writer based in Bucharest, Romania. Efforts prepared him to take my role after leaving Adobe.</li> <li>Writing tools: XMetaL, Oxygen (DITA authoring systems), GitHub, Confluence, Google docs.</li> </ul>"},{"location":"resume/resume/#tapad","title":"Tapad","text":"<p>Senior Technical Writer, 2013-2017</p> <ul> <li>First technical writer hired. Wrote documentation for Tapad\u2019s probabilistic, cross-device ad targeting system. Documentation helped client support teams create targeted ad campaigns for external clients.</li> <li>Worked with engineers to write API, Android, and iOS SDK documentation. </li> <li>Writing tools: Confluence, Google docs.</li> </ul>"},{"location":"resume/resume/#demdexadobe-systems","title":"Demdex/Adobe Systems","text":"<p>Technical Writer 2011-2013</p> <ul> <li>First technical writer hired. Demdex was a data management platform (DMP) acquired by Adobe. Documentation helped advertisers create, segment, target, and deliver ads to online audiences.</li> <li>Worked with engineers to write API, Android, and iOS documentation.</li> <li>Writing tools: Confluence, Google docs.</li> </ul>"},{"location":"resume/resume/#skills","title":"Skills","text":"<ul> <li> <p>Methodology: Written work follows Darwin Information Typing Architecture (DITA) documentation standards.</p> </li> <li> <p>Technologies: HTML editors, DITA/XML systems (Oxygen, XMetaL), Markdown, GitHub, MkDocs.</p> </li> <li>Others: Confluence, Coda, Loom (videos), LucidChart, Google (docs, slides, sheets), JIRA, Trello, Slack, Stack Overflow.</li> </ul>"},{"location":"resume/resume/#education","title":"Education","text":"<ul> <li>Master of Arts: US History, University of Mississippi</li> <li>Bachelor of Arts: History, University of Missouri</li> </ul>"},{"location":"resume/resume/#military","title":"Military","text":"<p>US Army, Honorable discharge.</p>"},{"location":"resume/resume/#contact","title":"Contact","text":"<ul> <li>Email: jwojak@gmail.com</li> <li>LinkedIn: www.linkedin.com/in/joewojak</li> <li>GitHub: jwwojak.github.io (and the site you're on now)</li> </ul>"},{"location":"samples/api-intro/","title":"Introduction","text":"<p>This API content is an example of my work for Adobe Audience Manager. Linked content opens in a new browser tab.</p>"},{"location":"samples/api-intro/#dynamic-examples","title":"Dynamic examples","text":"<p>See the Audience Manager REST API documentation.</p> <p>Originally, I wrote this API documentation in a DITA XML authoring environment and published it as static web pages. Over time, this XML model became difficult to maintain. API developers couldn't update it themselves and it didn't provide interactive features that external customers expected. As a result, I worked with the API team to migrate API content to Swagger.</p>"},{"location":"samples/api-intro/#static-examples","title":"Static examples","text":"<p>The user and group articles in this section are examples of my API documentation created in XMetaL and published as static HTML pages.</p>"},{"location":"samples/api-intro/#related-topics","title":"Related topics","text":"<p>The dynamic/Swagger API examples follow the style rules in my API documentation guidelines. </p>"},{"location":"samples/budget-data-center/","title":"Budget Distribution Among and Within Data Centers","text":"<p>Our data centers receive campaign budgets in direct proportion to the bid requests matched by their bidders. Within a data center, hardware differences between servers affect how much budget each bidder receives.</p>"},{"location":"samples/budget-data-center/#match-rates-and-budget-distribution","title":"Match rates and budget distribution","text":"<p>Budget management is easy when you have only one data center. In this scenario, the bidders receive all the budget available to them. But we have several regional data centers, not just one. This design makes systems fault tolerant and responsive to bid requests, but also exposes the limitations of even budget distribution.</p> <p>For example, with multiple data centers, even budget distribution is inefficient because one data center may receive more bid requests than the others. Also, even distribution strands budget in data centers that don\u2019t get many (or any) bid requests.</p> <p>To help solve the stranded budget problem, our systems allocate budgets to each data center in direct proportion to their match rate. The match rate measures how often the bidders in a data center can fulfill a bid request given the constraints set by each tactic. If a data center and its bidders match more bids, they receive a larger share of the total budget. This is a dynamic method of budget allocation that shifts resources between data centers and bidders in response to demand.</p> <p>In our technology stack, the budget allocator calculates the match rate and Watson manages and distributes budgets to the bidders. For more information about how these systems work, see Understanding Budget Distribution and Update Cycles.</p>"},{"location":"samples/budget-spend-intro/","title":"Budgets, Spending, and Pacing Delays","text":"<p>Sometimes your ad campaign may to start slowly or appear delayed. This behavior may relate to how our systems distribute campaign budgets throughout different data centers and systems. To help you understand and fix this issue, review the information in this section. It examines how our ad serving system manages/distributes budgets and explains how to force a budget update.</p>"},{"location":"samples/budget-update/","title":"Budget Updates Can Delay Tactic Delivery","text":"<p>Asynchronous budget updates can delay tactic delivery from 10 minutes to an hour. However, you can force a budget update if you change and save any setting for a campaign or tactic.</p>"},{"location":"samples/budget-update/#asynchronous-budget-and-bidder-update-cycles","title":"Asynchronous budget and bidder update cycles","text":"<p>Budget allocators and bidders update budget information at different times.</p> <ul> <li> <p>Budget allocators check for budget at 10-minute intervals.</p> </li> <li> <p>The bidders check Watson for budget at 1-hour intervals.</p> </li> </ul> <p>However, ad delivery depends on where the allocators and bidders are in their respective update cycles. These separate update cycles can delay ad delivery from 10 minutes to an hour. For example, if the bidders check for a budget amount:</p> <ul> <li> <p>Before the budget allocator, the tactics may not deliver ads. In this case, the budget allocator might not have had enough time to update and distribute budget before the bidder update cycle runs.</p> </li> <li> <p>After the budget allocator, the tactics may deliver ads. In this case, the budget allocator might have had enough time to update and distribute budget before the bidder update cycle runs.</p> </li> </ul> <p>For details about budget updates work, see Understanding Budget Distribution and Update Cycles.</p>"},{"location":"samples/create-group/","title":"Create a Group","text":"<p>A <code>POST</code> method to create a new user group.</p>"},{"location":"samples/create-group/#request","title":"Request","text":"<p><code>POST /api/v1/groups/</code></p> <pre><code> {\n    \"name\" : &lt;string&gt;,\n    \"description\" : &lt;string_may_be_null&gt;,\n }\n</code></pre>"},{"location":"samples/create-group/#response","title":"Response","text":"<pre><code>  {\n    \"groupId\" : &lt;integer&gt;,\n    \"pid\" : &lt;integer&gt;,\n    \"name\" : &lt;string&gt;,\n    \"description\" : &lt;string_may_be_null&gt;,\n    \"membershipCount\" : &lt;integer&gt;,\n    \"wildcards\" : &lt;list of strings&gt;,\n    \"users\" : &lt;list of user IDs&gt;\n  }\n</code></pre>"},{"location":"samples/create-user/","title":"Create a User","text":"<p>A <code>POST</code> method that creates a new user.</p>"},{"location":"samples/create-user/#request","title":"Request","text":"<p><code>POST /api/v1/users/</code></p> <pre><code>{ \n  \"username\" : &lt;string&gt;,  \n  \"status\" : &lt;\"ACTIVE\"|\"INACTIVE\"|\"LOCKED\"&gt; \n  \"firstName\" : &lt;string&gt;, \n  \"lastName\" : &lt;string&gt;, \n  \"email\" : &lt;string&gt;, \n  \"title\" : &lt;string_may_be_null&gt;, \n  \"phoneNumber\" : &lt;string_may_be_null&gt;, \n  \"groups\" : [&lt;group_1_id&gt;, ...], \n  \"isAdmin\" : true | false \n}\n</code></pre>  <p>Info</p> <p>If <code>isAdmin</code> is <code>true</code>, this creates the user as a partner administrator. This property also lets you know whether a user is already partner admin.</p>"},{"location":"samples/create-user/#response","title":"Response","text":"<pre><code>{ \n  \"pid\" : &lt;integer&gt;, \n  \"userId\": &lt;integer&gt;, \n  \"username\" : &lt;string&gt;,  \n  \"status\" : &lt;\"ACTIVE\"|\"INACTIVE\"|\"LOCKED\"&gt; \n  \"firstName\" : &lt;string&gt;, \n  \"lastName\" : &lt;string&gt;, \n  \"email\" : &lt;string&gt;, \n  \"title\" : &lt;string_may_be_null&gt;, \n  \"phoneNumber\" : &lt;string_may_be_null&gt;, \n  \"groups\" : [&lt;group_1_id&gt;, ...], \n  \"isAdmin\" : &lt;\"true\"|\"false\"&gt; \n\n}\n</code></pre> <p>Returns <code>409 Conflict</code> if the <code>username</code> is already taken.</p>"},{"location":"samples/delete-bulk/","title":"Delete Users in Bulk","text":"<p>A <code>POST</code> method to delete multiple users in bulk.</p>"},{"location":"samples/delete-bulk/#request","title":"Request","text":"<p><code>POST /api/v1/users/bulk-delete</code></p> <pre><code>{[&lt;user_id_1&gt;, &lt;user_id_2&gt;, ...]}\n</code></pre>"},{"location":"samples/delete-bulk/#response","title":"Response","text":"<p>Returns <code>204 No Content</code> if successful. In case of conflict, returns <code>409 Conflict</code>.</p>"},{"location":"samples/delete-group/","title":"Delete a Group","text":"<p>A <code>DELETE</code> method to delete a user group and remove all members from that group.</p>"},{"location":"samples/delete-group/#request","title":"Request","text":"<p><code>DELETE /api/v1/groups/&lt;groupId&gt;</code></p>"},{"location":"samples/delete-group/#response","title":"Response","text":"<p>Returns <code>204 No Content</code> if successful. In case of conflict returns <code>409 Conflict</code>.</p>"},{"location":"samples/delete-groups-bulk/","title":"Delete Groups in Bulk","text":"<p>A <code>DELETE</code> method to delete multiple groups in bulk and remove all members from that group.</p>"},{"location":"samples/delete-groups-bulk/#request","title":"Request","text":"<p><code>DELETE /api/v1/groups/bulk-delete</code></p>"},{"location":"samples/delete-groups-bulk/#response","title":"Response","text":"<p>Returns <code>204 No Content</code> if successful. In case of conflict returns <code>409 Conflict</code>.</p>"},{"location":"samples/delete-user/","title":"Delete a User","text":"<p>A <code>DELETE</code> method to delete a single user.</p>"},{"location":"samples/delete-user/#request","title":"Request","text":"<p><code>DELETE /api/v1/users/&lt;user_id&gt;</code></p>"},{"location":"samples/delete-user/#response","title":"Response","text":"<p>Returns <code>204 No Content</code> if successful. In case of conflict, returns <code>409 Conflict</code>.</p>"},{"location":"samples/force-budget/","title":"Force a Budget Update","text":"<p>You can force an out-of-cycle budget update if you need a tactic to start bidding right away. </p> <p>To force an update, make a change to the campaign or tactic and save that change. For example, you could add a space to a campaign\u2019s description field and save it. Saved changes prompt budget allocators and the bidders to check for new or revised budgets outside of their scheduled update intervals.</p>"},{"location":"samples/graph-basics/","title":"Device Graph Overview","text":"<p>The Device Graph consists of internet-enabled devices seen on a network and the connections (or edges) shared between each device. In the Device Graph, a \"connection\" is not a physical link between devices. In this case, the \"connection\" or \"edge\" refers to a virtual relationship between devices. This relationship is based on how recently and frequently 2 (or more) devices are seen together on a network.</p>"},{"location":"samples/graph-basics/#building-the-device-graph","title":"Building the Device Graph","text":"<p>We build the device graph with a process known as bridging. Bridging lets our systems identify and make connections between devices on the same network. The result is a map of all the devices on a particular network. In addition to bridging, our systems create and assigns various numeric scores to the connections between each device. These scores are designed to quantify relationships (strong or weak) among devices in the graph.</p>"},{"location":"samples/graph-basics/#composition","title":"Composition","text":"<p>A typical device graph contains:</p> <ul> <li>Desktop and laptop computers</li> <li>Tablets</li> <li>Mobile phones</li> <li>Game consoles</li> <li>Internet-enabled television sets</li> <li>Other networked devices</li> </ul>"},{"location":"samples/graph-basics/#data-sources","title":"Data sources","text":"<p>The Device Graph builds device connections from:</p> <ul> <li>HTTP headers in an ad impression.</li> <li>API and SDK calls.</li> <li>Information provided by third-party data partners.</li> </ul> <p>See the following table for more information.</p> <p>   Data sourceDescription   HTTP calls HTTP calls provide the largest data sets used to build the Device Graph. These calls come directly from:     <ul> <li>Webpage code</li> <li>Server-to-server integrations with other data providers or sources</li> </ul> This data includes, but is not limited to:     <ul> <li>Headers passed in an HTTP call</li> <li>Any other data points passed in from third-party partners/integrations</li> </ul> Note: We do not use or accept Personally Identifiable Information (PII) to bridge devices.    Authenticated sources Purchased data from sites that require user authentication. User authentication provides data we use to help build the Device Graph.   APIs or SDKs This is data returned by our APIs or Android and iOS SDKs.   Location-based sources Data from airport, stadium, hotel networks, and similar venues."},{"location":"samples/household-scores/","title":"Household Scores","text":"<p>Household scores measure the relationship strength between nodes (devices) in the Device Graph.</p> <ul> <li> <p>High scores suggest a closer connection between devices in a household than lower scores. High scores improve accuracy, but reduce reach.</p> </li> <li> <p>Low scores suggest a looser connection between devices in a household than higher scores. Low scores reduce accuracy, but increase reach.</p> </li> </ul> <p>Keep in mind, however, that these scored connections are abstract representations of different data points. They are not physical links between nodes.</p>"},{"location":"samples/household-scores/#purpose-of-household-scores","title":"Purpose of household scores","text":"<p>As described in the Device Graph Overview, a device graph is a map of connected devices on a network. By itself, a device map is not very useful because the nodes and connections (edges) between them look identical. As a result, we need a way to identify and define the relationships between each device.</p> <p>A metric, known as a household score helps us understand the relationships between and among different devices. A household score ranges from 1 (weakest) to 10 (strongest). Devices with high scoring edges are more strongly related than devices with lower scoring edges. As an example, see the device graph below.</p>  <p>This diagram shows devices A through E and their corresponding household scores. Within this graph:</p> <ul> <li> <p>Device A shares strong connections with Devices B, C, and D.</p> </li> <li> <p>Devices B, C, D, and E share weak connections among themselves.</p> </li> </ul>"},{"location":"samples/household-scores/#building-household-scores","title":"Building household scores","text":"<p>Our proprietary technology and algorithms help identify household devices and calculate their scores. Some key metrics that contribute to score calculations include:</p> <ul> <li> <p>Frequency: Our technology increases the household score between devices that connect to the same network frequently.</p> </li> <li> <p>Recency: Our technology increases the household score between devices that connect to the same network within a set time interval.</p> </li> <li> <p>Authenticated data: Device information from sites that require authentication. These devices usually have strong household scores because the authentication process ties a device to a specific user.</p> </li> </ul>  <p>Important</p> <p>Household scores increase in value only. To avoid perpetually increasing scores, and maintain data freshness, edges can (and do) expire. The Device Graph removes expired edges and scores from household network maps.</p>"},{"location":"samples/household-scores/#what-do-the-scores-really-mean","title":"What do the scores really mean?","text":"<p>Scores range from 1 (weakest) to 10 (strongest). Choosing one score vs another affects how many devices you can target or how many devices are available for synchronization.</p> <p>But, what does it mean to select a score of 3 compared to 5, or 7, or any other scores?</p> <ul> <li>A score of 1 represents 100% of the available edges.</li> <li>Each score greater than 1 reduces the available edges by 10% (e.g., score 2 reaches 90% of all edges, score 3 reaches 80%, and so on).</li> <li>Scores work on an equal to or greater than basis (e.g., score 7 includes all edges with the same value or higher).</li> </ul> <p>   Score &gt; =% of available edges   1 100%   2 90%   3 80%   4 70%   5 60%   6 50%   7 40%   8 30%   9 20%   10 10%"},{"location":"samples/household-scores/#reach-vs-accuracy","title":"Reach vs accuracy","text":"<p>Reach represents how many devices are available for targeting or synchronization. Accuracy represents how precise you are at delivering relevant content to those devices. Reach and accuracy are inversely proportional. As you increase the household score:</p> <ul> <li> <p>Reach decreases because score targeting includes devices that are equal to or greater than the selected score.</p> </li> <li> <p>Accuracy increases because you're more likely to reach a specific device audience.</p> </li> </ul> <p>Let's use the sample device graph above to demonstrate this behavior. Say you want to synchronize Device A with all the other devices in the graph and set the household score to 7. In this case, you'll reach Devices B (score 7) and D (score 10) only because those devices share an edge with device A that is = &gt; 7. Targeting a score of 7 excludes any edges with lower values.</p>"},{"location":"samples/individual-scores/","title":"Individual Scores","text":"<p>Individual scores measure the relationship strength within a household group in the Device Graph. They also help you sync IDs and reach devices at the user level.</p> <ul> <li> <p>High scores suggest a closer connection between devices and individuals than lower scores. High scores improve accuracy, but reduce reach.</p> </li> <li> <p>Low scores suggest a looser connection between devices and an individuals than higher scores. Low scores reduce accuracy, but increase reach.</p> </li> </ul> <p>Keep in mind, however, that these scored connections are abstract representations of different data points. They are not physical links between nodes.</p>"},{"location":"samples/individual-scores/#purpose-of-individual-scores","title":"Purpose of individual scores","text":"<p>As described in the Device Graph Overview, a device graph is a map of connected devices on a network. By itself, a device map is not very useful because the nodes and connections (edges) between them look identical. As a result, we need a way to identify and define the relationships between each device in a household and attempt to differentiate devices by their individual owners.</p> <p>A metric, known as a household score helps us understand the relationships between and among different devices.</p> <p>After building a graph with a household score, we can develop and apply an individual score to mapped devices in the household. An individual score ranges from 1 (weakest) to 10 (strongest). Devices with higher scores are more likely to belong to the same user than devices with lower scores. Individual scores quantify the relationship between devices and users in a household and help make accurate, cross-device targeting possible.</p>"},{"location":"samples/individual-scores/#individual-and-household-scores-compared","title":"Individual and household scores compared","text":"<p>To help you understand how individual scores work, take a look at the following illustration. It maps household and individual scores in a simple device graph. The graph contains Devices A through D and their corresponding scores.</p>  <p>Let's separate the devices by edge type and drop any connections less than 5. This shows us that:</p> <ul> <li> <p>High household scores between A, B, C, and D suggest these devices belong to the same household.</p> </li> <li> <p>High individual scores between A - C and D - B suggest these devices belong to different users. The other individual edge/score combinations for these devices are too low to make statistically confident assertions about device ownership.</p> </li> <li> <p>Comparing individual scores among all the devices suggests there are 2 distinct device users/owners in this household.</p> </li> </ul>"},{"location":"samples/individual-scores/#building-individual-scores","title":"Building individual scores","text":"<p>Individual scores are based on comparing and scoring the browsing behaviors of different devices described below.</p>"},{"location":"samples/individual-scores/#collect-data","title":"Collect data","text":"<p>The collection process gathers activity data about a device for a given context at a particular time. A context consists of browser or app-based activity such as visiting a website or using an app. The end result is a list of sites or apps visited or used by a device.</p>"},{"location":"samples/individual-scores/#correlate-data","title":"Correlate data","text":"<p>The correlation process builds an activity matrix from collected data. The matrix compares devices to site visits or app usage. For example, visiting a Google fantasy sports site on an iPhone might also show a correlation with visits to sites like ESPN.</p>"},{"location":"samples/individual-scores/#score-edges","title":"Score edges","text":"<p>Within a household, we score edges between devices that overlap on a similar site or app visits. Based on the results from a Pearson correlation, these edges get assigned a raw score that ranges between 0 and 1.</p>"},{"location":"samples/individual-scores/#test-edges","title":"Test edges","text":"<p>Edge testing compares the activity between devices connected by a \"real\" edge with devices connected by a \"false\" edge. A \"real\" edge is an actual connection/relationship between 2 devices. A \"false\" edge is an artificial connection/relationship between to other separate but identical devices. For example, say iPhone A and iPad A share a real edge in the Device Graph. Testing against a false edge links iPhone A to iPad B and iPad A to iPhone B as shown below.</p>  <p>The false edge gets a score, which is compared to the score for the real edge. If the real edge score is greater than the false edge score, the real edge wins. Repeating this test for 1000s of edges lets us create a win rate for the real edge. After testing, we apply a function to the win rate to generate the individual score for the real edge between 2 connected devices.</p>"},{"location":"samples/individual-scores/#bin-scores","title":"Bin scores","text":"<p>Binning creates the 1 - 10 score range. These scores work like household scores. See:</p> <ul> <li>What do these scores really mean?</li> <li>Reach vs accuracy</li> </ul>"},{"location":"samples/list-group-permissions/","title":"List Group Permissions","text":"<p>A <code>GET</code> method to list the permission objects on a group.</p>"},{"location":"samples/list-group-permissions/#request","title":"Request","text":"<p><code>GET /api/v1/groups/{groupId}/permissions</code></p>"},{"location":"samples/list-group-permissions/#response","title":"Response","text":"<pre><code>[{\n \"objectId\" : 34,\n \"objectType\": \"SEGMENT\",\n \"permissions\": [\"READ\", \"WRITE\", \"DELETE\", \"MAP_TO_MODELS\"]\n },\n\n{\n \"objectId\" : \"234\",\n \"objectType\": \"TRAIT\",\n \"permissions\": [\"READ\", \"WRITE\", \"DELETE\", \"MAP_TO_MODELS\"]\n },\n {\n \"objectId\" : 277,\n \"objectType\": \"SEGMENT\",\n \"permissions\": [\"READ\", \"WRITE\", \"MAP_TO_MODELS\"]\n }\n]\n</code></pre> <p>Returns <code>400 Bad Request</code> if the group is inaccessible.</p>"},{"location":"samples/list-groups/","title":"List Groups","text":"<p>A <code>GET</code> method to list user groups.</p>"},{"location":"samples/list-groups/#request","title":"Request","text":"<p><code>GET /api/v1/groups/</code></p>"},{"location":"samples/list-groups/#response","title":"Response","text":"<pre><code>[\n  { \n    \"groupId\" : &lt;integer&gt;,\n    \"pid\" : &lt;integer&gt;,\n    \"name\" : &lt;string&gt;,\n    \"description\" : &lt;string_may_be_null&gt;,\n    \"membershipCount\" : &lt;integer&gt;,\n    \"wildcards\" : &lt;list of strings&gt;,\n    \"users\" : &lt;list of user IDs&gt;\n  }, ...\n]\n</code></pre>"},{"location":"samples/samples-intro/","title":"Introduction","text":"<p>This section provides examples of my technical writing. I wrote this documentation for product knowledge base repositories, internal engineering teams, and customer-facing or account management teams. The pages in each section are related, but they\u2019re not the full documentation for a product or service. The information in these articles describes real systems or processes that may or may not be in operation today. </p> <p>Also, I\u2019ve created all the illustrations and diagrams in these examples. As a technical writer, I\u2019ve had little graphic design support and had to make images on my own. I\u2019ve used tools like Visio, Adobe Illustrator, Google Drawings, and Lucid Chart to add images to my written work.</p>"},{"location":"samples/setup-intro/","title":"Introduction","text":"<p>New employees and experienced engineers should review the information in this section. It describes how to set up your development environment and helps you determine if you already have the appropriate permissions, group memberships, and software required to work with data endpoints and create batch workflows. You can't complete the lessons and procedures in this tutorial without a properly configured development environment.</p> <p>The installation procedures in this section are optimized for macOS. However, they should work for Windows and Linux. Also, Windows or Linux users may find some steps too strict or not applicable. Feel free to customize the installation process so it works for you. Whatever operating system you're using, you should still follow these sections and steps in sequence. They're designed to create a development environment that works with this tutorial.</p>"},{"location":"samples/setup-java/","title":"Installing and Verifying Java/JDK","text":"<p>To finish this tutorial, you need Amazon Coretto Java/JDK version 11.</p>"},{"location":"samples/setup-java/#install-javajdk","title":"Install Java/JDK","text":"<p>To install Java/JDK 11, open a terminal window and:</p> <ol> <li> <p>Check the version availability by typing, <code>sdk list java | grep \"11.*amzn\"</code>. The output results should look similar to the following:</p> <pre><code>|  | 11.0.16  | amzn |  | 11.0.16-amzn\n</code></pre> </li> <li> <p>If you don't have v11, download and install it by typing, <code>sdk install java 11.0.16-amzn</code>.</p> </li> <li> <p>Set the version to 11 by typing, <code>sdk default java 11.0.16-amzn</code>.</p> </li> </ol>"},{"location":"samples/setup-java/#verify-javajdk","title":"Verify Java/JDK","text":"<p>After installation, verify that you have the correct version Java/JDK version (V11). To check, open a terminal window and:</p> <ol> <li> <p>Type <code>which java</code>. The output results should look similar to the following:</p> <pre><code>/Users/&lt;your_username&gt;/.sdkman/candidates/java/current/bin/java\n</code></pre> </li> <li> <p>Type <code>java --version</code>. The output results should look similar to the following:</p> <pre><code>openjdk 11.0.16 2022-07-19 LTS\nOpenJDK Runtime Environment Corretto-11.0.16.8.1 (build 11.0.16+8-LTS)\nOpenJDK 64-Bit Server VM Corretto-11.0.16.8.1 (build 11.0.16+8-LTS, mixed mode)\n</code></pre> </li> </ol>"},{"location":"samples/setup-sbt/","title":"Installing and Verifying SBT","text":"<p>To create batch workflows, you need SBT 1.6.</p>"},{"location":"samples/setup-sbt/#install-sbt","title":"Install SBT","text":"<p>To install SBT, open a terminal window and:</p> <ol> <li> <p>Check the version by typing <code>sdk list sbt | grep \"1\\.6\"</code>. This should return a list of SBT versions.</p> <ul> <li>If v1.6 is not installed, continue to step 2.</li> <li>If v1.6 is installed, verify the installation and/or continue to the next page.</li> </ul> </li> <li> <p>Download and install version 1.6 by typing, <code>sdk install sbt 1.6.2</code>. </p> </li> <li> <p>Set the version to 1.6 by typing <code>sdk default sbt 1.6.2</code>. </p> </li> </ol>"},{"location":"samples/setup-sbt/#verify-sbt","title":"Verify SBT","text":"<p>To verify that you have the correct version of SBT (1.6.2), open a terminal window and:</p> <ol> <li> <p>Type <code>which sbt</code>. The output results should look similar to the following:</p> <pre><code>/Users/&lt;your_username&gt;/.sdkman/candidates/sbt/current/bin/sbt\n</code></pre> </li> <li> <p>Type <code>sbt --version</code>. The output results should look similar to the following:</p> <pre><code>sbt version in this project: 1.6.2\nsbt script version: 1.6.2\n</code></pre> </li> </ol>"},{"location":"samples/setup-scala/","title":"Installing and Verifying Scala","text":"<p>To create batch workflows, you need Scala 2.13.</p>"},{"location":"samples/setup-scala/#install-scala","title":"Install Scala","text":"<p>To install Scala, open a terminal window and:</p> <ol> <li> <p>Check the version by typing <code>sdk list scala | grep \"2\\.13\"</code>. This should return a list of Scala versions.</p> <ul> <li>If v2.13 is not installed, continue to step 2.</li> <li>If v2.13 is installed, verify the installation and/or continue to the next page.</li> </ul> </li> <li> <p>Download and install version 2.13 by typing, <code>sdk install scala 2.13.8</code>. </p> </li> <li> <p>Set the version to 2.13.8 by typing, <code>sdk default scala 2.13.8</code>.</p> </li> </ol>"},{"location":"samples/setup-scala/#verify-scala","title":"Verify Scala","text":"<p>To verify that you have the correct version of Scala (2.13), open a terminal window and:</p> <ol> <li> <p>Type <code>which scala</code>. This should return the scala version from a folder named <code>.sdkman</code> and look similar to the following:</p> <pre><code>/Users/&lt;your_username&gt;/ .sdkman/candidates/scala/current/bin/scala\n</code></pre> </li> <li> <p>Type <code>scala --version</code>. This should return results similar to the following:</p> <pre><code>Scala code runner version 2.13.8 -- Copyright 2002-2022 LAMP/EPFL and Lightbend, Inc.\n</code></pre> </li> </ol>"},{"location":"samples/update-cycle/","title":"Understanding Budget Distribution and Update Cycles","text":"<p>The budget allocator, MySQL, Watson, Vertica and the bidders are important components that manage and distribute budgets. Let's look at how their independent operations affect budget data updates and distributions.</p>"},{"location":"samples/update-cycle/#pre-update-budget-distribution","title":"Pre-update budget distribution","text":"<p>In Backoffice, a MySQL database stores budget cap information for ad serving tactics.</p> <p>However, the budgets aren't immediately available to the bidders.</p> <p>Another system, the budget allocator, needs to run first and send bidder match rate data to Watson. Match rates let Watson assign budget amounts to each bidder in proportion to the amount of bids they\u2019ve matched given the constraints set by a tactic. If the bidders don\u2019t have a budget, they\u2019ll just sent match rate data to Vertica where it\u2019s passed on to the budget allocator.</p> <p>In the following illustration, the green circle shows you where budget information is distributed before the budget allocator or the bidders update themselves.</p>"},{"location":"samples/update-cycle/#post-update-budget-distribution","title":"Post-update budget distribution","text":"<p>Let's look at how budget data gets distributed after an update. In the following illustration, the green circle shows you where budget information is distributed after the budget allocator and bidders update themselves.</p>  <p>The table below explains what's happening after a budget distribution cycle.</p> <p>   SystemDescription   Budget allocatorAt 10-minute intervals, the budget allocator checks Vertica for bidder match rate data. It applies a factor to this data, which sets the budget for each bidder, based on their performance. The budget allocator sends this information to MySQL, which passes it on to Watson.   WatsonWatson is the authoritative source of budget information for the bidders. In this system, Watson:     <ul> <li>Allocates budgets to the bidders.</li> <li>Tracks bidder spending.</li> <li>Stops the bidders when they run out of budget.</li> </ul>    Bidders At 1-hour intervals, the bidders load/reload all the available campaign data from Watson. This ensures the bidders have the latest budget and campaign data. Also, this update takes bidder performance into account. As a result, the bidders receive budget amounts in proportion to their match rates, i.e., bidders that match a lot of requests receive more budget than those with fewer bid requests.Finally, the bidders continue to send match rate data to Vertica, which passes that information to the budget allocator."},{"location":"samples/update-group/","title":"Update a Group","text":"<p>A <code>PUT</code> method to update a user group.</p>"},{"location":"samples/update-group/#request","title":"Request","text":"<p><code>PUT /api/v1/groups/</code><code>&lt;groupId&gt;</code></p> <pre><code> {\n    \"name\" : &lt;string&gt;,\n    \"description\" : &lt;string_may_be_null&gt;,\n }\n</code></pre>"},{"location":"samples/update-group/#response","title":"Response","text":"<pre><code>  {\n    \"groupId\" : &lt;integer&gt;,\n    \"pid\" : &lt;integer&gt;,\n    \"name\" : &lt;string&gt;,\n    \"description\" : &lt;string_may_be_null&gt;,\n    \"membershipCount\" : &lt;integer&gt;,\n    \"wildcards\" : &lt;list of strings&gt;,\n    \"users\" : &lt;list of user IDs&gt;\n  }\n</code></pre>"},{"location":"samples/update-user/","title":"Update a User","text":"<p>A <code>PUT</code> method to update a user.</p>"},{"location":"samples/update-user/#request","title":"Request","text":"<p><code>PUT /api/v1/users/</code><code>&lt;userId&gt;</code></p> <pre><code>{ \n  \"username\" : &lt;string&gt;,  \n  \"status\" : &lt;\"ACTIVE\"|\"INACTIVE\"|\"LOCKED\"&gt; \n  \"firstName\" : &lt;string&gt;, \n  \"lastName\" : &lt;string&gt;, \n  \"email\" : &lt;string&gt;, \n  \"title\" : &lt;string_may_be_null&gt;, \n  \"phoneNumber\" : &lt;string_may_be_null&gt;, \n  \"groups\" : [&lt;group_1_id&gt;, ...] \n}\n</code></pre>"},{"location":"samples/update-user/#response","title":"Response","text":"<pre><code>{ \n  \"pid\" : &lt;integer&gt;, \n  \"userId\": &lt;integer&gt;, \n  \"username\" : &lt;string&gt;,  \n  \"status\" : &lt;\"ACTIVE\"|\"INACTIVE\"|\"LOCKED\"&gt; \n  \"firstName\" : &lt;string&gt;, \n  \"lastName\" : &lt;string&gt;, \n  \"email\" : &lt;string&gt;, \n  \"groups\" : [&lt;group_1_id&gt;, ...] \n\n}\n</code></pre> <p>Returns <code>409 Conflict</code> if the <code>username</code> is already taken.</p>"},{"location":"tutorial/annotate/","title":"Annotating Data","text":"<p>Annotations play an important role in data management. For example, annotations help:</p> <ul> <li> <p>Identify datasets that contain personally identifiable information (PII).</p> </li> <li> <p>Data governance teams and systems apply the appropriate level of protection to datasets that contain PII.</p> </li> </ul> <p>See the Data Access and Onboarding Introduction for the most current information and an in-depth guide to this topic.</p>  <p>Note</p> <ul> <li> <p>This section requires no action. We have already annotated the data for you, but please make sure to review this information. It provides background context about data annotations.</p> </li> <li> <p>You must annotate your data when sharing it outside of your team.</p> </li> </ul>"},{"location":"tutorial/annotate/#how-to-annotate","title":"How to annotate","text":"<p>To annotate data, first determine if it contains PII or not (see What is Personal Data for guidance). If your data:</p> <ul> <li> <p>Does not contain PII, annotate it with <code>{ policy: { noPersonalData: true }}</code></p> </li> <li> <p>Contains PII, annotate the field containing personal data with the correct semantic type. If your data contains <code>NARROW</code> or <code>STRICT</code> fields, you must encrypt it. See the Padlock Documentation on encryption.</p> </li> </ul>"},{"location":"tutorial/annotate/#viewing-annotated-data","title":"Viewing annotated data","text":"<p>Search for <code>UserTrackCounts</code> in the <code>README.md</code> of your repository.  Follow the link that takes you to the <code>UserTrackCounts</code> Avro schema file, which should be already annotated.</p> <p>Your dataset includes a <code>userId</code> field. The <code>userId</code> field is based on the <code>user_id</code> stored in the upstream dataset, di.golden.path.Stream.days.v1.parquet. In turn, the <code>user_id</code> is derived from an anonymized Spotify user ID. As previous information suggests, these user ID fields contain sensitive PII that require annotations. See also, the Personal Data Semantic Type Policy spreadsheet. It contains a comprehensive set of fields and their related annotation requirements.</p>"},{"location":"tutorial/create-workflow/","title":"Create a Data Workflow Component","text":"<p>We'll use the Styx Scheduled Scio Pipeline template (Flyte) on Backstage to create a new GHE repository for your data workflow component. Follow these instructions to get started.</p>"},{"location":"tutorial/create-workflow/#component-creation-steps","title":"Component creation steps","text":"<ol> <li> <p>Click the link above to start the creation process. This opens the template section shown below.</p>  </li> <li> <p>Identify and describe your component. Click Next to continue.</p> <ul> <li>Component ID: We suggest <code>de-gp-&lt;username&gt;</code> so others can see this belongs to you.</li> <li>Description: A concise description helps you, and others, understand what the component is or does.</li> </ul> </li> <li> <p>Select an owner and GHE repo for your component. We recommend using your squad name as the owner and setting the repository to a space used by your team's part of the organization. Click Next to continue.</p>  </li> <li> <p>(Optional) Select the ITGC checkbox only if your component is subject to ITGC compliance requirements. See the ITGC Backstage site for more information or if you have questions about ITGC. Click Next to continue.</p>  </li> <li> <p>Identify your GCP project and IAM group.</p> <ul> <li> <p>GCP project: Use one of the projects your squad owns. If you're unsure, ask a squad-mate or create a new project on Backstage.</p> </li> <li> <p>IAM group: Use your squad IAM group, which you can find in Band Manager. It's on your squad's page in the Details section.</p> </li> </ul>  </li> <li> <p>Review your workflow, make changes (if needed), and click Create Component to finish.</p>  </li> </ol>"},{"location":"tutorial/create-workflow/#post-configuration-steps","title":"Post-configuration steps","text":"<p>Backstage may take a few moments to create your component. It will let you know when the component is ready. Also, you can click GHE to see your new workflow repo.</p>"},{"location":"tutorial/endpoints/","title":"Understanding Data Endpoints and Workflows","text":"<p>A data endpoint is an entity that represents a collection of data.</p> <p>A data workflow (often called a data pipeline) reads input from data endpoints, applies transformations, and outputs new data endpoints. Workflows process data in batches that run once per scheduled interval, or in a streaming fashion that runs indefinitely.</p>"},{"location":"tutorial/endpoints/#use-cases","title":"Use cases","text":"<p>Different workflows are suitable for different use cases. In this tutorial, we'll show you how to build a batch workflow. However, many of the concepts taught here remain the same regardless of workflow type. The following table lists and describes the common workflow templates and their related use cases.</p>    Workflow template Use case     Flyte Scio When you need to create computationally demanding and/or resource-intensive dataflow jobs.   Flyte Python When you need to write a workflow using Python.   DBeam When you want to export data from a SQL database to Google Cloud Storage (GCS).   BigQuery Runner When you need to schedule a fully featured workflow running on BigQuery or when it's faster to calculate within BigQuery.   BigQuery Load When you want to export GCS data to BigQuery."},{"location":"tutorial/endpoints/#related-topics","title":"Related topics","text":"<ul> <li>Flyte</li> <li>DBeam</li> </ul>"},{"location":"tutorial/summary/","title":"Summary","text":"<p>Congratulations, you've completed the Data Engineering Shiny Path tutorial. Maybe the journey was a little rough. That's OK. The road is under construction, but hopefully this tutorial helped you:</p> <ul> <li> <p>Understand batch data workflows (pipelines), their use cases, and related engineering concepts.</p> </li> <li> <p>Install and configure the supported tools and services required to create a batch workflow.</p> </li> <li>Build, test, and run a batch data workflow.</li> </ul>"},{"location":"tutorial/summary/#contribute","title":"Contribute","text":"<p>Feedback about your experience is essential to helping us improve the Data Engineering Shiny Path tutorial. Make a contribution to this work by reporting errors, vague or ambiguous text, typos, or other issues you noticed while reading this content and working on the lessons. To report problems or just share some thoughts:</p> <ul> <li> <p>Highlight a section of text and select Open a GHE issue.</p> </li> <li> <p>Click the pen icon in the top right corner of a page, edit the text in GHE, and open a pull request.</p> </li> <li>Post a comment in the #dataex Slack channel.</li> </ul> <p>We appreciate your input and rely on the Spotify community to help us improve and fix confusing or inaccurate content.</p>"},{"location":"tutorial/summary/#go-team","title":"Go team","text":"<p>Working on a potential replacement for the Data Engineering Golden Path, or any golden path, is demanding and challenging. The standards here are high because this content affects and reflects the quality of our engineering culture. As a result, everyone involved with this project would like to thank you, the reader, for your learning efforts and feedback. Also, let's take a moment to recognize the DataEx squad and the Amplify technical writers for their time and ongoing dedication to this project.</p>"},{"location":"tutorial/welcome/","title":"Introduction and Welcome","text":"<p>Hello friends! Welcome to an early version of the revised Data Engineering Golden Path. The concepts, examples, and lessons in this tutorial will teach you how to publish a production-grade data endpoint via a batch data workflow (pipeline).</p>  <p>Alpha release</p> <p>This tutorial is in alpha and subject to change after user testing. It is designed as an eventual replacement for the batch workflow content in the Data Engineering Golden Path. Currently, this release excludes some topics that would bring it to parity with that golden path. These include:</p> <ul> <li>Counters</li> <li>Reading from and writing to BigQuery</li> <li>ITGC</li> </ul>   What is a golden path? <p>A golden path tutorial introduces you to a topic and our company-specific ways to do something. It is not the full documentation for a particular subject. Instead, a golden path touches briefly on each tool and task, and does just enough to establish the basic, opinionated, and optimal way of working.</p>"},{"location":"tutorial/welcome/#who-should-use-this-tutorial","title":"Who should use this tutorial","text":"<p>This tutorial is designed for:</p> <ul> <li> <p>New engineers who need to get up to speed with concepts and ways of working with batch data workflows.</p> </li> <li> <p>Employees changing roles within the company and who need to create and manage batch data workflows.</p> </li> <li> <p>Anyone looking for information on how to create and manage batch data workflows or who are curious about how it all works. </p> </li> </ul>"},{"location":"tutorial/welcome/#how-to-use-this-tutorial","title":"How to use this tutorial","text":"<ul> <li> <p>New engineers should start at the beginning and work sequentially through each part and lesson to the end.</p> </li> <li> <p>Engineers with experience building workflows are also encouraged to follow the same beginning-to-end sequence as new engineers. If you have previous knowledge, then a more targeted approach might suit your learning style and experience, but we encourage you to work through this tutorial systematically.</p> </li> </ul> <p>As you work through the Data Engineering Shiny Path, keep in mind that it introduces you to our data tooling. Again, this isn't the full documentation for those tools. This is just enough to get you started.</p>  <p>Note</p> <p>Each section in this shiny path builds upon the concepts and lessons learned in the previous sections. Skipping lessons might mean you're bypassing critical information or the required part of a learning exercise that spans multiple sections.</p>"},{"location":"tutorial/welcome/#contribute","title":"Contribute","text":"<p>Open a GHE issue to leave feedback or report an error. We appreciate your input and rely on the community to help us fix confusing or inaccurate content.</p> <p>Our GHE repository is LINK TO GHE REPO HERE.</p>"},{"location":"tutorial/welcome/#help-and-support","title":"Help and support","text":"<p>BOILERPLATE HELP TEXT TBD HERE.</p>"}]}